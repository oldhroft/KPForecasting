{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"KPMLPGridSearch","provenance":[],"mount_file_id":"1H6NixPykZzNBXt4I9ZQe6SzHwOtd3iPV","authorship_tag":"ABX9TyMrh6LDEYeFc3w2CmVY8L0Y"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":482},"id":"8stHN9yXwGhi","executionInfo":{"status":"ok","timestamp":1648753841847,"user_tz":-180,"elapsed":24805,"user":{"displayName":"Исмаил Гаджиев","userId":"12440853034109944227"}},"outputId":"a0298a60-b7e2-42fe-de9c-259038920ab1"},"outputs":[{"output_type":"stream","name":"stdout","text":["(70776, 65)\n"]},{"output_type":"execute_result","data":{"text/plain":["    year  month  day  hour from  hour to    doySin   hourSin    doyCos  \\\n","0   1997     10   21          0        1 -0.505271  0.991445 -0.862961   \n","3   1997     10   21          3        4 -0.507126  0.608761 -0.861872   \n","6   1997     10   21          6        7 -0.508980 -0.130526 -0.860779   \n","9   1997     10   21          9       10 -0.510831 -0.793353 -0.859681   \n","12  1997     10   21         12       13 -0.512679 -0.991445 -0.858580   \n","\n","     hourCos  Dst  ...  lg(E>2 MeV)  E>2 MeV G16  lg(E>2 MeV) G16  \\\n","0  -0.130526  -14  ...     0.715307          NaN              NaN   \n","3  -0.793353  -13  ...     0.318573          NaN              NaN   \n","6  -0.991445  -15  ...     0.070838          NaN              NaN   \n","9  -0.608761  -13  ...     0.501584          NaN              NaN   \n","12  0.130526  -10  ...     1.011042          NaN              NaN   \n","\n","    CH_rca (193)  CH_rca (211)  SW_spd_frcst (193)  SW_spd_frcst (211)  \\\n","0            NaN           NaN                 NaN                 NaN   \n","3            NaN           NaN                 NaN                 NaN   \n","6            NaN           NaN                 NaN                 NaN   \n","9            NaN           NaN                 NaN                 NaN   \n","12           NaN           NaN                 NaN                 NaN   \n","\n","    Unnamed: 62  category                dttm  \n","0           NaN         0 1997-10-21 00:00:00  \n","3           NaN         0 1997-10-21 03:00:00  \n","6           NaN         0 1997-10-21 06:00:00  \n","9           NaN         0 1997-10-21 09:00:00  \n","12          NaN         0 1997-10-21 12:00:00  \n","\n","[5 rows x 65 columns]"],"text/html":["\n","  <div id=\"df-4cc93880-1dbc-438f-a5e4-528866da1272\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","      <th>hour from</th>\n","      <th>hour to</th>\n","      <th>doySin</th>\n","      <th>hourSin</th>\n","      <th>doyCos</th>\n","      <th>hourCos</th>\n","      <th>Dst</th>\n","      <th>...</th>\n","      <th>lg(E&gt;2 MeV)</th>\n","      <th>E&gt;2 MeV G16</th>\n","      <th>lg(E&gt;2 MeV) G16</th>\n","      <th>CH_rca (193)</th>\n","      <th>CH_rca (211)</th>\n","      <th>SW_spd_frcst (193)</th>\n","      <th>SW_spd_frcst (211)</th>\n","      <th>Unnamed: 62</th>\n","      <th>category</th>\n","      <th>dttm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1997</td>\n","      <td>10</td>\n","      <td>21</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>-0.505271</td>\n","      <td>0.991445</td>\n","      <td>-0.862961</td>\n","      <td>-0.130526</td>\n","      <td>-14</td>\n","      <td>...</td>\n","      <td>0.715307</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1997-10-21 00:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1997</td>\n","      <td>10</td>\n","      <td>21</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>-0.507126</td>\n","      <td>0.608761</td>\n","      <td>-0.861872</td>\n","      <td>-0.793353</td>\n","      <td>-13</td>\n","      <td>...</td>\n","      <td>0.318573</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1997-10-21 03:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1997</td>\n","      <td>10</td>\n","      <td>21</td>\n","      <td>6</td>\n","      <td>7</td>\n","      <td>-0.508980</td>\n","      <td>-0.130526</td>\n","      <td>-0.860779</td>\n","      <td>-0.991445</td>\n","      <td>-15</td>\n","      <td>...</td>\n","      <td>0.070838</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1997-10-21 06:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1997</td>\n","      <td>10</td>\n","      <td>21</td>\n","      <td>9</td>\n","      <td>10</td>\n","      <td>-0.510831</td>\n","      <td>-0.793353</td>\n","      <td>-0.859681</td>\n","      <td>-0.608761</td>\n","      <td>-13</td>\n","      <td>...</td>\n","      <td>0.501584</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1997-10-21 09:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1997</td>\n","      <td>10</td>\n","      <td>21</td>\n","      <td>12</td>\n","      <td>13</td>\n","      <td>-0.512679</td>\n","      <td>-0.991445</td>\n","      <td>-0.858580</td>\n","      <td>0.130526</td>\n","      <td>-10</td>\n","      <td>...</td>\n","      <td>1.011042</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1997-10-21 12:00:00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 65 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cc93880-1dbc-438f-a5e4-528866da1272')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4cc93880-1dbc-438f-a5e4-528866da1272 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4cc93880-1dbc-438f-a5e4-528866da1272');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}],"source":["\n","import pandas as pd\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","sns.set()\n","\n","import datetime\n","\n","def categorize(x):\n","    if x <= 30: return 0\n","    elif x <= 50: return 1\n","    else: return 2\n","\n","def preprocess_3h(df):\n","\n","    x = df.copy()\n","\n","    x['category'] = x['Kp*10'].apply(categorize)\n","\n","    x['dttm'] = x.apply(\n","        lambda y: datetime.datetime(\n","            int(y.year), int(y.month), \n","            int(y.day), int(y['hour from']), 0), axis=1)\n","    \n","    x_3h = x.sort_values(by='dttm').iloc[:: 3]\n","    return x_3h\n","\n","ROOT_PATH = '/content/drive/MyDrive/kp_data'\n","\n","import os\n","import glob\n","\n","files = glob.glob(os.path.join(ROOT_PATH, '*'))\n","\n","files = dict(map(lambda x: (x.split('/')[-1], x), files))\n","\n","df = pd.read_csv(\n","    files['All_browse_data_без_погружения_19971021_20211231_с_пропусками.csv'], \n","    encoding='cp1251', na_values='N').pipe(preprocess_3h)\n","print(df.shape)\n","df.head()"]},{"cell_type":"code","source":["all_variables = [\n","    'Kp*10', 'Dst', 'B_x', 'B_gsm_y', 'B_gsm_z', \n","    'B_magn', 'SW_spd', 'H_den_SWP', 'dttm', 'category'\n"," ]\n","\n","predictors  = [\n","    'Kp*10', 'Dst', 'B_x', 'B_gsm_y', 'B_gsm_z', \n","    'B_magn', 'SW_spd', 'H_den_SWP',\n"," ]\n","\n","def simple_preprocessing(df):\n","    x = df.copy()\n","\n","    x = x.bfill()\n","\n","    return x\n","\n","def _choose_suffix_name(forward: bool, suffix_name: str) -> str:\n","    if suffix_name is not None:\n","        return suffix_name\n","    else:\n","        return 'lead' if forward else 'lag'\n","\n","def _trim(df: pd.DataFrame, forward: bool, trim: bool, lags: int) -> pd.DataFrame:\n","    if trim and forward:\n","        return df.iloc[: -lags]\n","    elif trim:\n","        return df.iloc[lags: ]\n","    else:\n","        return df\n","\n","def add_lags(df: pd.DataFrame, subset: list=None, forward: bool=False,\n","             lags: int=1, trim: bool=False, suffix_name: str=None,\n","             return_cols=False) -> pd.DataFrame:\n","\n","    suffix_name = _choose_suffix_name(forward, suffix_name)\n","\n","    x = df.copy()\n","\n","    digits = len(str(lags))\n","\n","    columns = []\n","\n","    if not isinstance(lags, int):\n","        raise ValueError(f'Lags should be int, {type(lags)} type prodided')\n","    elif lags < 0:\n","        raise ValueError(f'Lags should be non-negative')\n","    elif lags == 0:\n","        return x\n","    elif subset is None:\n","        for i in range(1, lags + 1):\n","            lag = - i if forward else i\n","            index = str(i).zfill(digits)\n","            column_suffix = f'_{suffix_name}_{index}'\n","\n","            x = x.join(x.shift(lag).add_suffix(column_suffix))\n","        \n","        columns = x.columns.tolist()\n","\n","    elif isinstance(subset, list):\n","        for i in range(1, lags + 1):\n","            lag = - i if forward else i\n","            index = str(i).zfill(digits)\n","            column_suffix = f'_{suffix_name}_{index}'\n","            tmp = x.loc[:, subset].shift(lag).add_suffix(column_suffix)\n","            columns.extend(tmp.columns)\n","            x = x.join(tmp)\n","\n","    elif isinstance(subset, str):\n","        for i in range(1, lags + 1):\n","            lag = - i if forward else i\n","            index = str(i).zfill(digits)\n","            column_name = f'{subset}_{suffix_name}_{index}'\n","            columns.append(column_name)\n","\n","            x = x.join(x.loc[:, subset].shift(lag).rename(column_name))\n","    else:\n","        raise ValueError(f'Subset should be str or list, providided type {type(subset)}')\n","\n","    if return_cols:\n","        return _trim(x, forward, trim, lags), columns\n","    else:\n","        return _trim(x, forward, trim, lags)\n","def get_train_test(df: pd.DataFrame, columns: list, \n","                   forward_steps: int, backward_steps: int, \n","                   last: str='24m', last_val=None) -> tuple:\n","\n","    ts_df_back, lag_cols = add_lags(df, lags=backward_steps, forward=False, \n","                                    trim=True, subset=columns, \n","                                    return_cols=True)\n","    lag_cols.extend(columns)\n","    ts_df_back_test = ts_df_back.set_index('dttm').last(last)\n","\n","    index_test = ts_df_back_test.index\n","    ts_df_back_train = ts_df_back.set_index('dttm').drop(index_test)\n","\n","\n","    if last_val is not None:\n","        ts_df_back_val = ts_df_back_train.last(last_val)\n","        index_val = ts_df_back_val.index\n","        ts_df_back_train = ts_df_back.set_index('dttm').drop(index_val)\n","        df_val, lead_cols = add_lags(ts_df_back_val, lags=forward_steps,\n","                                       forward=True, trim=True, \n","                                       subset='category', return_cols=True)\n","\n","    df_train, lead_cols = add_lags(ts_df_back_train, lags=forward_steps,\n","                                   forward=True, trim=True, \n","                                   subset='category', return_cols=True)\n","    df_test, lead_cols = add_lags(ts_df_back_test, lags=forward_steps, \n","                                  forward=True, trim=True, \n","                                  subset='category', return_cols=True)\n","    if last_val is not None:\n","        return (\n","            df_train.reset_index(), lag_cols,\n","            df_val.reset_index(), lag_cols,\n","            df_test.reset_index(), lead_cols)\n","    else:\n","        return (\n","            df_train.reset_index(), lag_cols,\n","            df_test.reset_index(), lead_cols)\n","\n","from sklearn.metrics import multilabel_confusion_matrix, confusion_matrix\n","from sklearn.metrics import f1_score\n","\n","from types import FunctionType\n","\n","def columnwise_score(scoring_func: FunctionType, \n","                     preds_df: pd.DataFrame, \n","                     true_df: pd.DataFrame,\n","                     **kwargs) -> pd.Series:\n","\n","    score = pd.Series(dtype='float64')\n","    for (column_pred, y_pred), (columns_true, y_true) in zip(preds_df.iteritems(), \n","                                                             true_df.iteritems()):\n","        score[column_pred] = scoring_func(y_pred, y_true, **kwargs)\n","    \n","    return score"],"metadata":{"id":"7IQB7wizwK4o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_train, lag_cols, df_test, lead_cols = get_train_test(\n","    df.pipe(simple_preprocessing), predictors, 24 // 3, 24)"],"metadata":{"id":"_T2_62SLwQHS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train, y_train = df_train[lag_cols], df_train[lead_cols[0]]\n","X_test, y_test = df_test[lag_cols], df_test[lead_cols]"],"metadata":{"id":"OIuNUE7TwXbl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras import layers as L\n","from tensorflow.keras import optimizers as opt\n","from tensorflow.keras import callbacks as callbacks\n","\n","from tensorflow.random import set_seed"],"metadata":{"id":"_aQrHEc7waVm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_model(input_shape: tuple, units_array: list=[10], n_classes: int=3,\n","              optimizer: str='adam') -> Sequential:\n","\n","    model = Sequential([\n","        L.Input(shape=input_shape),\n","        *(L.Dense(units=units, activation='relu') for units in units_array),\n","        L.Dense(units=3, activation='softmax')  \n","    ])\n","\n","    model.compile(loss='categorical_crossentropy', optimizer=optimizer)\n","\n","    return model\n","\n","def get_callbacks(patience: int=10) -> list:\n","    return [\n","        callbacks.EarlyStopping(monitor='val_loss', \n","                                restore_best_weights=True, patience=10),\n","    ]"],"metadata":{"id":"5fbS-4o3wcy-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler().fit(X_train)\n","\n","X_train_scaled = scaler.transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","y_train_dummy = pd.get_dummies(y_train)\n","\n","shape = (X_train_scaled.shape[1], )"],"metadata":{"id":"9rEy3y81wgZO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import StratifiedKFold"],"metadata":{"id":"gYGAeTs3w0sv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import time\n","\n","def validate_keras_cv(model: FunctionType, get_callbacks: FunctionType, shape: tuple,\n","                      cv, params: list, param_name: str, scoring: FunctionType,\n","                      X: pd.DataFrame, y: pd.Series,\n","                      verbose: bool=True, seed: int=None,\n","                      scoring_kwargs: dict={}, fit_kwargs: dict={}, \n","                      callback_kwargs: dict={}) -> list:\n","    \n","    scores = []\n","\n","    for param in params:\n","\n","        start_time = time.time()\n","        \n","        if seed is not None: set_seed(seed)\n","        if verbose: print('Fitting param {} = {}'.format(param_name, param))\n","        sub_scores = []\n","        for train_idx, test_idx in cv.split(X, y):\n","            callbacks_ = get_callbacks(**callback_kwargs)\n","            model_param = model(shape, **{param_name: param})\n","            X_train, y_train = X[train_idx], y[train_idx]\n","            X_test, y_test = X[test_idx], y[test_idx]\n","            y_train = pd.get_dummies(y_train)\n","            model_param.fit(X_train, y_train, callbacks=callbacks_,\n","                            **fit_kwargs)\n","            y_preds = model_param.predict(X_test).argmax(axis=1)\n","            sub_scores.append(scoring(y_preds, y_test, **scoring_kwargs))\n","        \n","        scores.append(sub_scores)\n","   \n","        end_time = time.time()\n","        if verbose: print('Param {} = {}, time {:.2f}'.format(param_name, \n","                                                              param, \n","                                                              end_time - start_time))\n","\n","    return scores\n","\n","        "],"metadata":{"id":"a_gtLNSHwjzS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["params = [\n","    [32,], [32, 16,], [32, 16, 8]\n","]\n","\n","scoring_kwargs = dict(average='macro')\n","fit_kwargs = dict(epochs=60, validation_split=.1,)\n","skf = StratifiedKFold(n_splits=5)\n","\n","scores = validate_keras_cv(get_model, get_callbacks, shape, skf,\n","                        params, 'units_array', f1_score,\n","                        X_train_scaled, y_train, \n","                        True, 17, scoring_kwargs, fit_kwargs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZHCnP1WryUhw","executionInfo":{"status":"ok","timestamp":1647788453599,"user_tz":-180,"elapsed":851682,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"ac0030eb-263a-4fde-bfe9-ef11a1dd1d23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting param units_array = [32]\n","Epoch 1/60\n","1465/1465 [==============================] - 6s 3ms/step - loss: 0.3414 - val_loss: 0.1531\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2923 - val_loss: 0.1481\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2823 - val_loss: 0.1509\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2765 - val_loss: 0.1502\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2716 - val_loss: 0.1517\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2676 - val_loss: 0.1479\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2642 - val_loss: 0.1513\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2616 - val_loss: 0.1503\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2592 - val_loss: 0.1494\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2564 - val_loss: 0.1503\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2545 - val_loss: 0.1495\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2519 - val_loss: 0.1507\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2496 - val_loss: 0.1530\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2476 - val_loss: 0.1547\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2456 - val_loss: 0.1574\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2445 - val_loss: 0.1549\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3461 - val_loss: 0.1608\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2904 - val_loss: 0.1510\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2793 - val_loss: 0.1501\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2716 - val_loss: 0.1476\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2674 - val_loss: 0.1492\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2624 - val_loss: 0.1498\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2598 - val_loss: 0.1512\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2567 - val_loss: 0.1527\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2534 - val_loss: 0.1495\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2512 - val_loss: 0.1515\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2484 - val_loss: 0.1528\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2459 - val_loss: 0.1529\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2437 - val_loss: 0.1536\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2420 - val_loss: 0.1541\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3815 - val_loss: 0.1580\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3170 - val_loss: 0.1524\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3062 - val_loss: 0.1510\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2987 - val_loss: 0.1522\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2938 - val_loss: 0.1633\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2901 - val_loss: 0.1545\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2867 - val_loss: 0.1577\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2837 - val_loss: 0.1535\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2811 - val_loss: 0.1535\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2776 - val_loss: 0.1559\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2753 - val_loss: 0.1546\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2730 - val_loss: 0.1658\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2708 - val_loss: 0.1613\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3577 - val_loss: 0.1662\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2947 - val_loss: 0.1642\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2824 - val_loss: 0.1649\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2760 - val_loss: 0.1605\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2707 - val_loss: 0.1624\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2669 - val_loss: 0.1660\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2648 - val_loss: 0.1608\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2599 - val_loss: 0.1659\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2577 - val_loss: 0.1635\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2548 - val_loss: 0.1670\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2524 - val_loss: 0.1639\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2492 - val_loss: 0.1767\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2479 - val_loss: 0.1681\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2458 - val_loss: 0.1705\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3779 - val_loss: 0.2136\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3013 - val_loss: 0.1967\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2901 - val_loss: 0.2074\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2825 - val_loss: 0.1987\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2776 - val_loss: 0.2138\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2740 - val_loss: 0.1915\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2708 - val_loss: 0.1961\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2665 - val_loss: 0.2040\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2644 - val_loss: 0.1981\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2617 - val_loss: 0.1924\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2584 - val_loss: 0.1981\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2563 - val_loss: 0.1969\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2540 - val_loss: 0.2074\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2522 - val_loss: 0.2090\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2491 - val_loss: 0.2056\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2471 - val_loss: 0.2060\n","Param units_array = [32], time 215.33\n","Fitting param units_array = [32, 16]\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3545 - val_loss: 0.1538\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2913 - val_loss: 0.1484\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2809 - val_loss: 0.1502\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2752 - val_loss: 0.1505\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2700 - val_loss: 0.1504\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2660 - val_loss: 0.1486\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2616 - val_loss: 0.1516\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2588 - val_loss: 0.1516\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2555 - val_loss: 0.1513\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2523 - val_loss: 0.1516\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2497 - val_loss: 0.1525\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2463 - val_loss: 0.1533\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3411 - val_loss: 0.1644\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2895 - val_loss: 0.1552\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2789 - val_loss: 0.1542\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2718 - val_loss: 0.1509\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2670 - val_loss: 0.1505\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2616 - val_loss: 0.1493\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2583 - val_loss: 0.1530\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2546 - val_loss: 0.1579\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2507 - val_loss: 0.1513\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2483 - val_loss: 0.1542\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2449 - val_loss: 0.1548\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2423 - val_loss: 0.1554\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2389 - val_loss: 0.1556\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2366 - val_loss: 0.1569\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2326 - val_loss: 0.1581\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2317 - val_loss: 0.1600\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3701 - val_loss: 0.1555\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3161 - val_loss: 0.1527\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3046 - val_loss: 0.1559\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2974 - val_loss: 0.1591\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2921 - val_loss: 0.1660\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2874 - val_loss: 0.1601\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2839 - val_loss: 0.1625\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2804 - val_loss: 0.1576\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2778 - val_loss: 0.1583\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2740 - val_loss: 0.1548\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2712 - val_loss: 0.1587\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2679 - val_loss: 0.1760\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3564 - val_loss: 0.1766\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2928 - val_loss: 0.1676\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2803 - val_loss: 0.1729\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2734 - val_loss: 0.1621\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2677 - val_loss: 0.1776\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2635 - val_loss: 0.1994\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2602 - val_loss: 0.1733\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2549 - val_loss: 0.1916\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2521 - val_loss: 0.1831\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2487 - val_loss: 0.1812\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2462 - val_loss: 0.1951\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2426 - val_loss: 0.2089\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2403 - val_loss: 0.2065\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2376 - val_loss: 0.2109\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3618 - val_loss: 0.2042\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2981 - val_loss: 0.1953\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2872 - val_loss: 0.1997\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2798 - val_loss: 0.2000\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2754 - val_loss: 0.2107\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2709 - val_loss: 0.1897\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2675 - val_loss: 0.1922\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2632 - val_loss: 0.2007\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2613 - val_loss: 0.1905\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2577 - val_loss: 0.1915\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2547 - val_loss: 0.1988\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2513 - val_loss: 0.2004\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2493 - val_loss: 0.2003\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2459 - val_loss: 0.2112\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2426 - val_loss: 0.2030\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2412 - val_loss: 0.2082\n","Param units_array = [32, 16], time 256.57\n","Fitting param units_array = [32, 16, 8]\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3492 - val_loss: 0.1530\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2905 - val_loss: 0.1477\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2812 - val_loss: 0.1499\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2756 - val_loss: 0.1507\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2709 - val_loss: 0.1492\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2673 - val_loss: 0.1490\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2630 - val_loss: 0.1506\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2609 - val_loss: 0.1499\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2571 - val_loss: 0.1483\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2548 - val_loss: 0.1477\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2522 - val_loss: 0.1500\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2487 - val_loss: 0.1519\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2463 - val_loss: 0.1516\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2430 - val_loss: 0.1535\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2410 - val_loss: 0.1534\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2390 - val_loss: 0.1506\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2368 - val_loss: 0.1549\n","Epoch 18/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2349 - val_loss: 0.1573\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2319 - val_loss: 0.1543\n","Epoch 20/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2312 - val_loss: 0.1572\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3394 - val_loss: 0.1578\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2889 - val_loss: 0.1532\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2789 - val_loss: 0.1519\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2722 - val_loss: 0.1476\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2677 - val_loss: 0.1483\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2631 - val_loss: 0.1481\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2602 - val_loss: 0.1492\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2559 - val_loss: 0.1531\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2528 - val_loss: 0.1509\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2499 - val_loss: 0.1525\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2461 - val_loss: 0.1539\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2434 - val_loss: 0.1516\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2404 - val_loss: 0.1550\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2371 - val_loss: 0.1557\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3698 - val_loss: 0.1526\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3230 - val_loss: 0.1536\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3107 - val_loss: 0.1599\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3024 - val_loss: 0.1619\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2952 - val_loss: 0.1697\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2881 - val_loss: 0.1622\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2854 - val_loss: 0.1610\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2801 - val_loss: 0.1556\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2774 - val_loss: 0.1602\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2730 - val_loss: 0.1526\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2701 - val_loss: 0.1626\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2669 - val_loss: 0.1733\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2640 - val_loss: 0.1717\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2611 - val_loss: 0.1645\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2595 - val_loss: 0.1661\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2561 - val_loss: 0.1703\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2536 - val_loss: 0.1717\n","Epoch 18/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2507 - val_loss: 0.1726\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2490 - val_loss: 0.1690\n","Epoch 20/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2472 - val_loss: 0.1659\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3448 - val_loss: 0.1727\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2922 - val_loss: 0.1612\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2811 - val_loss: 0.1635\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2754 - val_loss: 0.1550\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2706 - val_loss: 0.1644\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2670 - val_loss: 0.1680\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2645 - val_loss: 0.1618\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2600 - val_loss: 0.1642\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2579 - val_loss: 0.1677\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2538 - val_loss: 0.1766\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2508 - val_loss: 0.1714\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2479 - val_loss: 0.1794\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2457 - val_loss: 0.1721\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2428 - val_loss: 0.1781\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3672 - val_loss: 0.2066\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2986 - val_loss: 0.1930\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2866 - val_loss: 0.1994\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2805 - val_loss: 0.1920\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2756 - val_loss: 0.2089\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2715 - val_loss: 0.1926\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2690 - val_loss: 0.1909\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2647 - val_loss: 0.1976\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2625 - val_loss: 0.1908\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2601 - val_loss: 0.1920\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2561 - val_loss: 0.1929\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2535 - val_loss: 0.1937\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2514 - val_loss: 0.1987\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2491 - val_loss: 0.2050\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2456 - val_loss: 0.1984\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2436 - val_loss: 0.2022\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2416 - val_loss: 0.1988\n","Epoch 18/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2387 - val_loss: 0.2019\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2373 - val_loss: 0.1992\n","Param units_array = [32, 16, 8], time 379.56\n"]}]},{"cell_type":"code","source":["np.array(scores).mean(axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6LlC6ryr3jKS","executionInfo":{"status":"ok","timestamp":1647788861200,"user_tz":-180,"elapsed":282,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"ce0c06af-3cf9-4d46-fe42-d521325a4db7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.59894891, 0.60469236, 0.61260246])"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["params = [\n","    [32, 16, 8], [64, 32, 16], [128, 64, 32],\n","    [16, 8, 4], [64, 16, 8], [128, 32, 16],\n","]\n","\n","\n","scoring_kwargs = dict(average='macro')\n","fit_kwargs = dict(epochs=60, validation_split=.1,)\n","skf = StratifiedKFold(n_splits=5)\n","\n","scores = validate_keras_cv(get_model, get_callbacks, shape, skf,\n","                        params, 'units_array', f1_score,\n","                        X_train_scaled, y_train, \n","                        True, 17, scoring_kwargs, fit_kwargs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"klK3EKTOywrv","executionInfo":{"status":"ok","timestamp":1647790789659,"user_tz":-180,"elapsed":1909158,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"d589ba6e-fb53-48d1-e7ea-1fefbad0cd6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting param units_array = [32, 16, 8]\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3492 - val_loss: 0.1530\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2905 - val_loss: 0.1477\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2812 - val_loss: 0.1499\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2756 - val_loss: 0.1507\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2709 - val_loss: 0.1492\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2673 - val_loss: 0.1490\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2630 - val_loss: 0.1506\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2609 - val_loss: 0.1499\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2571 - val_loss: 0.1483\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2548 - val_loss: 0.1477\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2522 - val_loss: 0.1500\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2487 - val_loss: 0.1519\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2463 - val_loss: 0.1516\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2430 - val_loss: 0.1535\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2410 - val_loss: 0.1534\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2390 - val_loss: 0.1506\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2368 - val_loss: 0.1549\n","Epoch 18/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2349 - val_loss: 0.1573\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2319 - val_loss: 0.1543\n","Epoch 20/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2312 - val_loss: 0.1572\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3394 - val_loss: 0.1578\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2889 - val_loss: 0.1532\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2789 - val_loss: 0.1519\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2722 - val_loss: 0.1476\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2677 - val_loss: 0.1483\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2631 - val_loss: 0.1481\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2602 - val_loss: 0.1492\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2559 - val_loss: 0.1531\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2528 - val_loss: 0.1509\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2499 - val_loss: 0.1525\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2461 - val_loss: 0.1539\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2434 - val_loss: 0.1516\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2404 - val_loss: 0.1550\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2371 - val_loss: 0.1557\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3698 - val_loss: 0.1526\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3230 - val_loss: 0.1536\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3107 - val_loss: 0.1599\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3024 - val_loss: 0.1619\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2952 - val_loss: 0.1697\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2881 - val_loss: 0.1622\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2854 - val_loss: 0.1610\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2801 - val_loss: 0.1556\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2774 - val_loss: 0.1602\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2730 - val_loss: 0.1526\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2701 - val_loss: 0.1626\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2669 - val_loss: 0.1733\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2640 - val_loss: 0.1717\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2611 - val_loss: 0.1645\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2595 - val_loss: 0.1661\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2561 - val_loss: 0.1703\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2536 - val_loss: 0.1717\n","Epoch 18/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2507 - val_loss: 0.1726\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2490 - val_loss: 0.1690\n","Epoch 20/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2472 - val_loss: 0.1659\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3448 - val_loss: 0.1727\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2922 - val_loss: 0.1612\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2811 - val_loss: 0.1635\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2754 - val_loss: 0.1550\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2706 - val_loss: 0.1644\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2670 - val_loss: 0.1680\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2645 - val_loss: 0.1618\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2600 - val_loss: 0.1642\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2579 - val_loss: 0.1677\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2538 - val_loss: 0.1766\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2508 - val_loss: 0.1714\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2479 - val_loss: 0.1794\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2457 - val_loss: 0.1721\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2428 - val_loss: 0.1781\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3672 - val_loss: 0.2066\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2986 - val_loss: 0.1930\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2866 - val_loss: 0.1994\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2805 - val_loss: 0.1920\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2756 - val_loss: 0.2089\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2715 - val_loss: 0.1926\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2690 - val_loss: 0.1909\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2647 - val_loss: 0.1976\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2625 - val_loss: 0.1908\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2601 - val_loss: 0.1920\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2561 - val_loss: 0.1929\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2535 - val_loss: 0.1937\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2514 - val_loss: 0.1987\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2491 - val_loss: 0.2050\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2456 - val_loss: 0.1984\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2436 - val_loss: 0.2022\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2416 - val_loss: 0.1988\n","Epoch 18/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2387 - val_loss: 0.2019\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2373 - val_loss: 0.1992\n","Param units_array = [32, 16, 8], time 353.79\n","Fitting param units_array = [64, 32, 16]\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3330 - val_loss: 0.1532\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2871 - val_loss: 0.1473\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2773 - val_loss: 0.1517\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2706 - val_loss: 0.1533\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2635 - val_loss: 0.1476\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2576 - val_loss: 0.1478\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2514 - val_loss: 0.1515\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2458 - val_loss: 0.1509\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2396 - val_loss: 0.1533\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2350 - val_loss: 0.1517\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2278 - val_loss: 0.1559\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2222 - val_loss: 0.1592\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3299 - val_loss: 0.1542\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2863 - val_loss: 0.1503\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2760 - val_loss: 0.1518\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2676 - val_loss: 0.1490\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2612 - val_loss: 0.1503\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2539 - val_loss: 0.1535\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2477 - val_loss: 0.1547\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2411 - val_loss: 0.1601\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2337 - val_loss: 0.1581\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2266 - val_loss: 0.1581\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2211 - val_loss: 0.1643\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2145 - val_loss: 0.1627\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2086 - val_loss: 0.1654\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2044 - val_loss: 0.1706\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3622 - val_loss: 0.1520\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3118 - val_loss: 0.1490\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3015 - val_loss: 0.1547\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2924 - val_loss: 0.1574\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2860 - val_loss: 0.1632\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2782 - val_loss: 0.1580\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2724 - val_loss: 0.1634\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2657 - val_loss: 0.1566\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2599 - val_loss: 0.1705\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2519 - val_loss: 0.1656\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2448 - val_loss: 0.1814\n","Epoch 12/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2389 - val_loss: 0.1904\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3307 - val_loss: 0.1752\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2876 - val_loss: 0.1729\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2763 - val_loss: 0.1694\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2691 - val_loss: 0.1596\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2619 - val_loss: 0.1670\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2551 - val_loss: 0.1864\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2499 - val_loss: 0.1672\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2417 - val_loss: 0.1924\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2379 - val_loss: 0.1811\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2297 - val_loss: 0.2019\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2247 - val_loss: 0.2004\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2178 - val_loss: 0.2016\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2111 - val_loss: 0.2100\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2070 - val_loss: 0.2299\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3432 - val_loss: 0.2000\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2940 - val_loss: 0.1999\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2841 - val_loss: 0.2087\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2761 - val_loss: 0.2064\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2695 - val_loss: 0.2144\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2635 - val_loss: 0.1962\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2585 - val_loss: 0.2011\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2511 - val_loss: 0.2040\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2469 - val_loss: 0.2057\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2404 - val_loss: 0.1994\n","Epoch 11/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2332 - val_loss: 0.2035\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2262 - val_loss: 0.2101\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2220 - val_loss: 0.2205\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2156 - val_loss: 0.2355\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2103 - val_loss: 0.2386\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2048 - val_loss: 0.2311\n","Param units_array = [64, 32, 16], time 266.21\n","Fitting param units_array = [128, 64, 32]\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3246 - val_loss: 0.1534\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2868 - val_loss: 0.1478\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2772 - val_loss: 0.1548\n","Epoch 4/60\n","1465/1465 [==============================] - 5s 3ms/step - loss: 0.2693 - val_loss: 0.1555\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2615 - val_loss: 0.1482\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2535 - val_loss: 0.1508\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2440 - val_loss: 0.1520\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2365 - val_loss: 0.1496\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2248 - val_loss: 0.1583\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2148 - val_loss: 0.1651\n","Epoch 11/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2037 - val_loss: 0.1640\n","Epoch 12/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.1915 - val_loss: 0.1698\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3246 - val_loss: 0.1522\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2834 - val_loss: 0.1496\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2734 - val_loss: 0.1482\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2636 - val_loss: 0.1492\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2562 - val_loss: 0.1516\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2457 - val_loss: 0.1554\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2356 - val_loss: 0.1577\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2233 - val_loss: 0.1595\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2136 - val_loss: 0.1636\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2013 - val_loss: 0.1687\n","Epoch 11/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.1877 - val_loss: 0.1750\n","Epoch 12/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.1773 - val_loss: 0.1723\n","Epoch 13/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.1659 - val_loss: 0.1872\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3552 - val_loss: 0.1540\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3107 - val_loss: 0.1524\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2998 - val_loss: 0.1584\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2890 - val_loss: 0.1679\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2800 - val_loss: 0.1807\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2680 - val_loss: 0.1711\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2593 - val_loss: 0.1862\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2469 - val_loss: 0.1659\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2361 - val_loss: 0.1692\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2241 - val_loss: 0.1788\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2099 - val_loss: 0.1833\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2000 - val_loss: 0.2381\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3234 - val_loss: 0.1714\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2868 - val_loss: 0.1624\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2761 - val_loss: 0.1688\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2679 - val_loss: 0.1544\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2580 - val_loss: 0.1729\n","Epoch 6/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2491 - val_loss: 0.1822\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2412 - val_loss: 0.1751\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2282 - val_loss: 0.1920\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2179 - val_loss: 0.2021\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2057 - val_loss: 0.2253\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.1954 - val_loss: 0.2369\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.1834 - val_loss: 0.2361\n","Epoch 13/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.1710 - val_loss: 0.2677\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.1627 - val_loss: 0.2859\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3376 - val_loss: 0.1910\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2929 - val_loss: 0.1924\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2829 - val_loss: 0.1975\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2748 - val_loss: 0.2062\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2663 - val_loss: 0.2054\n","Epoch 6/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2583 - val_loss: 0.1950\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2497 - val_loss: 0.2090\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2392 - val_loss: 0.2077\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2293 - val_loss: 0.2190\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2181 - val_loss: 0.2163\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2073 - val_loss: 0.2134\n","Param units_array = [128, 64, 32], time 340.05\n","Fitting param units_array = [16, 8, 4]\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.4571 - val_loss: 0.1675\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3020 - val_loss: 0.1515\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2868 - val_loss: 0.1507\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2804 - val_loss: 0.1472\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2768 - val_loss: 0.1480\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2733 - val_loss: 0.1461\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2708 - val_loss: 0.1488\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2694 - val_loss: 0.1479\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2675 - val_loss: 0.1464\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2656 - val_loss: 0.1493\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2645 - val_loss: 0.1468\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2627 - val_loss: 0.1467\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2615 - val_loss: 0.1480\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2598 - val_loss: 0.1477\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2584 - val_loss: 0.1478\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2575 - val_loss: 0.1481\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3718 - val_loss: 0.1650\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2999 - val_loss: 0.1533\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2857 - val_loss: 0.1501\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2787 - val_loss: 0.1468\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2742 - val_loss: 0.1470\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2712 - val_loss: 0.1461\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2683 - val_loss: 0.1452\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2667 - val_loss: 0.1483\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2652 - val_loss: 0.1444\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2633 - val_loss: 0.1456\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2617 - val_loss: 0.1461\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2607 - val_loss: 0.1458\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2592 - val_loss: 0.1466\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2579 - val_loss: 0.1464\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2560 - val_loss: 0.1467\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2559 - val_loss: 0.1485\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2554 - val_loss: 0.1473\n","Epoch 18/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2539 - val_loss: 0.1479\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2533 - val_loss: 0.1503\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.4036 - val_loss: 0.1637\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3356 - val_loss: 0.1543\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3213 - val_loss: 0.1554\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3128 - val_loss: 0.1562\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3068 - val_loss: 0.1565\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3009 - val_loss: 0.1523\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2964 - val_loss: 0.1515\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2935 - val_loss: 0.1495\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2914 - val_loss: 0.1458\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2883 - val_loss: 0.1496\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2869 - val_loss: 0.1505\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2850 - val_loss: 0.1558\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2837 - val_loss: 0.1545\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2823 - val_loss: 0.1494\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2811 - val_loss: 0.1483\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2797 - val_loss: 0.1557\n","Epoch 17/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2782 - val_loss: 0.1544\n","Epoch 18/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2770 - val_loss: 0.1523\n","Epoch 19/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2763 - val_loss: 0.1504\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3843 - val_loss: 0.1656\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2974 - val_loss: 0.1628\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2840 - val_loss: 0.1618\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2787 - val_loss: 0.1551\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2744 - val_loss: 0.1614\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2718 - val_loss: 0.1697\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2698 - val_loss: 0.1611\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2669 - val_loss: 0.1657\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2656 - val_loss: 0.1668\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2633 - val_loss: 0.1730\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2614 - val_loss: 0.1792\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2606 - val_loss: 0.1750\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2588 - val_loss: 0.1694\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2581 - val_loss: 0.1732\n","Epoch 1/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.7161 - val_loss: 0.2902\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3192 - val_loss: 0.1926\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2930 - val_loss: 0.2003\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2869 - val_loss: 0.1854\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2826 - val_loss: 0.2060\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2805 - val_loss: 0.1850\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2786 - val_loss: 0.1861\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2756 - val_loss: 0.1958\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2748 - val_loss: 0.1858\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2730 - val_loss: 0.1931\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2711 - val_loss: 0.1969\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2698 - val_loss: 0.1958\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2690 - val_loss: 0.2007\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2668 - val_loss: 0.2144\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2658 - val_loss: 0.1949\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2645 - val_loss: 0.2007\n","Param units_array = [16, 8, 4], time 381.42\n","Fitting param units_array = [64, 16, 8]\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3402 - val_loss: 0.1545\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2892 - val_loss: 0.1471\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2788 - val_loss: 0.1484\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2723 - val_loss: 0.1514\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2662 - val_loss: 0.1479\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2612 - val_loss: 0.1486\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2550 - val_loss: 0.1497\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2503 - val_loss: 0.1505\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2458 - val_loss: 0.1481\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2416 - val_loss: 0.1510\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2359 - val_loss: 0.1502\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2307 - val_loss: 0.1536\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3339 - val_loss: 0.1592\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2860 - val_loss: 0.1505\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2747 - val_loss: 0.1482\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2664 - val_loss: 0.1468\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2601 - val_loss: 0.1496\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2529 - val_loss: 0.1473\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2471 - val_loss: 0.1511\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2411 - val_loss: 0.1534\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2346 - val_loss: 0.1506\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2296 - val_loss: 0.1525\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2233 - val_loss: 0.1557\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2195 - val_loss: 0.1557\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2130 - val_loss: 0.1607\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2090 - val_loss: 0.1619\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3611 - val_loss: 0.1546\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.3135 - val_loss: 0.1521\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3013 - val_loss: 0.1570\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2933 - val_loss: 0.1592\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2869 - val_loss: 0.1651\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2806 - val_loss: 0.1619\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2749 - val_loss: 0.1647\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2689 - val_loss: 0.1590\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2645 - val_loss: 0.1680\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2563 - val_loss: 0.1660\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2524 - val_loss: 0.1728\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2464 - val_loss: 0.2097\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3380 - val_loss: 0.1757\n","Epoch 2/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2883 - val_loss: 0.1663\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2774 - val_loss: 0.1638\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2705 - val_loss: 0.1583\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2639 - val_loss: 0.1680\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2587 - val_loss: 0.1815\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2536 - val_loss: 0.1628\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2473 - val_loss: 0.1744\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2434 - val_loss: 0.1698\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2364 - val_loss: 0.1957\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2321 - val_loss: 0.1823\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2264 - val_loss: 0.1930\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2208 - val_loss: 0.2018\n","Epoch 14/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2154 - val_loss: 0.1994\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3571 - val_loss: 0.2111\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2969 - val_loss: 0.1966\n","Epoch 3/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2862 - val_loss: 0.2052\n","Epoch 4/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2782 - val_loss: 0.2015\n","Epoch 5/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2721 - val_loss: 0.2137\n","Epoch 6/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2665 - val_loss: 0.1938\n","Epoch 7/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2620 - val_loss: 0.2048\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2553 - val_loss: 0.2088\n","Epoch 9/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2519 - val_loss: 0.2010\n","Epoch 10/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2459 - val_loss: 0.2049\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2405 - val_loss: 0.2107\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2351 - val_loss: 0.2015\n","Epoch 13/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2303 - val_loss: 0.2035\n","Epoch 14/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2253 - val_loss: 0.2210\n","Epoch 15/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2195 - val_loss: 0.2270\n","Epoch 16/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2163 - val_loss: 0.2292\n","Param units_array = [64, 16, 8], time 298.37\n","Fitting param units_array = [128, 32, 16]\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3291 - val_loss: 0.1551\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2880 - val_loss: 0.1462\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2776 - val_loss: 0.1550\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2698 - val_loss: 0.1563\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2617 - val_loss: 0.1502\n","Epoch 6/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2542 - val_loss: 0.1507\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2461 - val_loss: 0.1563\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2373 - val_loss: 0.1533\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2289 - val_loss: 0.1579\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2198 - val_loss: 0.1610\n","Epoch 11/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2106 - val_loss: 0.1615\n","Epoch 12/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2002 - val_loss: 0.1686\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3252 - val_loss: 0.1550\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2833 - val_loss: 0.1503\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2732 - val_loss: 0.1512\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2646 - val_loss: 0.1490\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2567 - val_loss: 0.1494\n","Epoch 6/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2484 - val_loss: 0.1514\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2401 - val_loss: 0.1592\n","Epoch 8/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2306 - val_loss: 0.1617\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2211 - val_loss: 0.1629\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2124 - val_loss: 0.1662\n","Epoch 11/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2028 - val_loss: 0.1700\n","Epoch 12/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.1922 - val_loss: 0.1788\n","Epoch 13/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.1826 - val_loss: 0.1938\n","Epoch 14/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.1736 - val_loss: 0.2059\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3549 - val_loss: 0.1520\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.3097 - val_loss: 0.1522\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2988 - val_loss: 0.1602\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2893 - val_loss: 0.1668\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2814 - val_loss: 0.1698\n","Epoch 6/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2722 - val_loss: 0.1727\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2642 - val_loss: 0.1957\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2541 - val_loss: 0.1663\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2451 - val_loss: 0.1869\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2347 - val_loss: 0.1908\n","Epoch 11/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2247 - val_loss: 0.1855\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3251 - val_loss: 0.1697\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2869 - val_loss: 0.1672\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2757 - val_loss: 0.1755\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2669 - val_loss: 0.1584\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2596 - val_loss: 0.1690\n","Epoch 6/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2510 - val_loss: 0.1790\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2437 - val_loss: 0.1719\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2327 - val_loss: 0.1902\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2250 - val_loss: 0.1870\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2129 - val_loss: 0.2046\n","Epoch 11/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2036 - val_loss: 0.2119\n","Epoch 12/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.1962 - val_loss: 0.2126\n","Epoch 13/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.1861 - val_loss: 0.2232\n","Epoch 14/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.1786 - val_loss: 0.2504\n","Epoch 1/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.3378 - val_loss: 0.1930\n","Epoch 2/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2927 - val_loss: 0.1926\n","Epoch 3/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2819 - val_loss: 0.2127\n","Epoch 4/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2735 - val_loss: 0.2035\n","Epoch 5/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2664 - val_loss: 0.2122\n","Epoch 6/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2588 - val_loss: 0.1929\n","Epoch 7/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2506 - val_loss: 0.2144\n","Epoch 8/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2407 - val_loss: 0.2065\n","Epoch 9/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2329 - val_loss: 0.2192\n","Epoch 10/60\n","1465/1465 [==============================] - 4s 3ms/step - loss: 0.2242 - val_loss: 0.2055\n","Epoch 11/60\n","1465/1465 [==============================] - 4s 2ms/step - loss: 0.2153 - val_loss: 0.2202\n","Epoch 12/60\n","1465/1465 [==============================] - 3s 2ms/step - loss: 0.2043 - val_loss: 0.2266\n","Param units_array = [128, 32, 16], time 268.93\n"]}]},{"cell_type":"code","source":["np.array(scores).mean(axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ddYBJESw2dPU","executionInfo":{"status":"ok","timestamp":1647791699184,"user_tz":-180,"elapsed":375,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"5e0ebf8f-39c5-47bb-ce8c-c16607f12902"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.61260246, 0.6130837 , 0.59349332, 0.62062552, 0.60121321,\n","       0.59378932])"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["df_train, lag_cols, df_test, lead_cols = get_train_test(\n","    df.pipe(simple_preprocessing), predictors, 24 // 3, 24)\n","\n","X_train, y_train = df_train[lag_cols], df_train[lead_cols]\n","X_test, y_test = df_test[lag_cols], df_test[lead_cols]\n","\n","from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler().fit(X_train)\n","\n","X_train_scaled = scaler.transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","shape = (X_train_scaled.shape[1], )"],"metadata":{"id":"G0e51q2pCfDO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["shape = (X_train_scaled.shape[1], )\n","\n","preds_df = {}\n","\n","for col in lead_cols:\n","    y_dummy = pd.get_dummies(y_train[col])\n","    set_seed(17)\n","    model = get_model(shape, units_array=[16, 8, 4])\n","\n","    callbacks_list = [\n","        callbacks.EarlyStopping(monitor='val_loss', \n","                                restore_best_weights=True, patience=10),\n","    ]\n","\n","    model.fit(X_train_scaled, y_dummy, epochs=60, \n","              callbacks=callbacks_list, validation_split=.1, )\n","    \n","    preds = model.predict(X_test_scaled).argmax(axis=1)\n","\n","    preds_df[col] = preds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vdUSN6V2DQ4a","executionInfo":{"status":"ok","timestamp":1647792529199,"user_tz":-180,"elapsed":566642,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"25956fdf-ddc8-42f1-9e15-0f6f5d2af6a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/60\n","1831/1831 [==============================] - 6s 3ms/step - loss: 0.4392 - val_loss: 0.1742\n","Epoch 2/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3048 - val_loss: 0.1606\n","Epoch 3/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2931 - val_loss: 0.1589\n","Epoch 4/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2882 - val_loss: 0.1586\n","Epoch 5/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2844 - val_loss: 0.1572\n","Epoch 6/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2820 - val_loss: 0.1574\n","Epoch 7/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2800 - val_loss: 0.1564\n","Epoch 8/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2781 - val_loss: 0.1568\n","Epoch 9/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2766 - val_loss: 0.1574\n","Epoch 10/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2751 - val_loss: 0.1581\n","Epoch 11/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2735 - val_loss: 0.1577\n","Epoch 12/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2723 - val_loss: 0.1599\n","Epoch 13/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2716 - val_loss: 0.1594\n","Epoch 14/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2701 - val_loss: 0.1584\n","Epoch 15/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2692 - val_loss: 0.1582\n","Epoch 16/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2676 - val_loss: 0.1599\n","Epoch 17/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.2665 - val_loss: 0.1587\n","Epoch 1/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4846 - val_loss: 0.2039\n","Epoch 2/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3630 - val_loss: 0.1993\n","Epoch 3/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3546 - val_loss: 0.1982\n","Epoch 4/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3507 - val_loss: 0.1951\n","Epoch 5/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.3477 - val_loss: 0.1936\n","Epoch 6/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3452 - val_loss: 0.1940\n","Epoch 7/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3436 - val_loss: 0.1924\n","Epoch 8/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3416 - val_loss: 0.1943\n","Epoch 9/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3403 - val_loss: 0.1949\n","Epoch 10/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3393 - val_loss: 0.1941\n","Epoch 11/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3378 - val_loss: 0.1930\n","Epoch 12/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3365 - val_loss: 0.1940\n","Epoch 13/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3356 - val_loss: 0.1935\n","Epoch 14/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3343 - val_loss: 0.1951\n","Epoch 15/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3332 - val_loss: 0.1998\n","Epoch 16/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3319 - val_loss: 0.1951\n","Epoch 17/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3314 - val_loss: 0.1936\n","Epoch 1/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.5117 - val_loss: 0.2272\n","Epoch 2/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3958 - val_loss: 0.2201\n","Epoch 3/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3885 - val_loss: 0.2208\n","Epoch 4/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3842 - val_loss: 0.2157\n","Epoch 5/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3813 - val_loss: 0.2171\n","Epoch 6/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3790 - val_loss: 0.2169\n","Epoch 7/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3773 - val_loss: 0.2175\n","Epoch 8/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3751 - val_loss: 0.2191\n","Epoch 9/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3735 - val_loss: 0.2201\n","Epoch 10/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3723 - val_loss: 0.2173\n","Epoch 11/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3709 - val_loss: 0.2189\n","Epoch 12/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3698 - val_loss: 0.2203\n","Epoch 13/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3686 - val_loss: 0.2188\n","Epoch 14/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3671 - val_loss: 0.2171\n","Epoch 1/60\n","1831/1831 [==============================] - 5s 2ms/step - loss: 0.5292 - val_loss: 0.2434\n","Epoch 2/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4173 - val_loss: 0.2378\n","Epoch 3/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4108 - val_loss: 0.2345\n","Epoch 4/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4070 - val_loss: 0.2349\n","Epoch 5/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4044 - val_loss: 0.2327\n","Epoch 6/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4014 - val_loss: 0.2349\n","Epoch 7/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3990 - val_loss: 0.2329\n","Epoch 8/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3973 - val_loss: 0.2350\n","Epoch 9/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3952 - val_loss: 0.2337\n","Epoch 10/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3938 - val_loss: 0.2321\n","Epoch 11/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3925 - val_loss: 0.2307\n","Epoch 12/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3912 - val_loss: 0.2332\n","Epoch 13/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3896 - val_loss: 0.2342\n","Epoch 14/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3888 - val_loss: 0.2334\n","Epoch 15/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3876 - val_loss: 0.2341\n","Epoch 16/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.3868 - val_loss: 0.2349\n","Epoch 17/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3857 - val_loss: 0.2342\n","Epoch 18/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3853 - val_loss: 0.2336\n","Epoch 19/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3840 - val_loss: 0.2384\n","Epoch 20/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3832 - val_loss: 0.2343\n","Epoch 21/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.3827 - val_loss: 0.2385\n","Epoch 1/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.5414 - val_loss: 0.2514\n","Epoch 2/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4332 - val_loss: 0.2528\n","Epoch 3/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4272 - val_loss: 0.2492\n","Epoch 4/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4232 - val_loss: 0.2490\n","Epoch 5/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4202 - val_loss: 0.2471\n","Epoch 6/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4183 - val_loss: 0.2482\n","Epoch 7/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4160 - val_loss: 0.2523\n","Epoch 8/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4136 - val_loss: 0.2473\n","Epoch 9/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4124 - val_loss: 0.2453\n","Epoch 10/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4103 - val_loss: 0.2464\n","Epoch 11/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4089 - val_loss: 0.2479\n","Epoch 12/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4078 - val_loss: 0.2480\n","Epoch 13/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4066 - val_loss: 0.2494\n","Epoch 14/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4055 - val_loss: 0.2506\n","Epoch 15/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4047 - val_loss: 0.2500\n","Epoch 16/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4037 - val_loss: 0.2501\n","Epoch 17/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4027 - val_loss: 0.2481\n","Epoch 18/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4019 - val_loss: 0.2494\n","Epoch 19/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4008 - val_loss: 0.2523\n","Epoch 1/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.5550 - val_loss: 0.2678\n","Epoch 2/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4463 - val_loss: 0.2651\n","Epoch 3/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4401 - val_loss: 0.2650\n","Epoch 4/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4366 - val_loss: 0.2675\n","Epoch 5/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4334 - val_loss: 0.2622\n","Epoch 6/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4313 - val_loss: 0.2631\n","Epoch 7/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4292 - val_loss: 0.2639\n","Epoch 8/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4272 - val_loss: 0.2634\n","Epoch 9/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4256 - val_loss: 0.2676\n","Epoch 10/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4242 - val_loss: 0.2620\n","Epoch 11/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4225 - val_loss: 0.2672\n","Epoch 12/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4214 - val_loss: 0.2616\n","Epoch 13/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4203 - val_loss: 0.2645\n","Epoch 14/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4190 - val_loss: 0.2628\n","Epoch 15/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4182 - val_loss: 0.2706\n","Epoch 16/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4170 - val_loss: 0.2641\n","Epoch 17/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4160 - val_loss: 0.2621\n","Epoch 18/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4155 - val_loss: 0.2668\n","Epoch 19/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4143 - val_loss: 0.2648\n","Epoch 20/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4129 - val_loss: 0.2686\n","Epoch 21/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4129 - val_loss: 0.2683\n","Epoch 22/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4122 - val_loss: 0.2735\n","Epoch 1/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.5626 - val_loss: 0.2715\n","Epoch 2/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4562 - val_loss: 0.2680\n","Epoch 3/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4502 - val_loss: 0.2669\n","Epoch 4/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4463 - val_loss: 0.2741\n","Epoch 5/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4429 - val_loss: 0.2723\n","Epoch 6/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4404 - val_loss: 0.2687\n","Epoch 7/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4384 - val_loss: 0.2699\n","Epoch 8/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4364 - val_loss: 0.2664\n","Epoch 9/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4346 - val_loss: 0.2714\n","Epoch 10/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4332 - val_loss: 0.2676\n","Epoch 11/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4315 - val_loss: 0.2713\n","Epoch 12/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4306 - val_loss: 0.2724\n","Epoch 13/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4290 - val_loss: 0.2724\n","Epoch 14/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4283 - val_loss: 0.2687\n","Epoch 15/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4268 - val_loss: 0.2762\n","Epoch 16/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4262 - val_loss: 0.2705\n","Epoch 17/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4250 - val_loss: 0.2692\n","Epoch 18/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4245 - val_loss: 0.2722\n","Epoch 1/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.5708 - val_loss: 0.2884\n","Epoch 2/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4642 - val_loss: 0.2799\n","Epoch 3/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4584 - val_loss: 0.2788\n","Epoch 4/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4546 - val_loss: 0.2790\n","Epoch 5/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4514 - val_loss: 0.2830\n","Epoch 6/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4492 - val_loss: 0.2828\n","Epoch 7/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4469 - val_loss: 0.2772\n","Epoch 8/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4455 - val_loss: 0.2777\n","Epoch 9/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4438 - val_loss: 0.2772\n","Epoch 10/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4423 - val_loss: 0.2742\n","Epoch 11/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4408 - val_loss: 0.2769\n","Epoch 12/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4391 - val_loss: 0.2844\n","Epoch 13/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4382 - val_loss: 0.2793\n","Epoch 14/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4374 - val_loss: 0.2764\n","Epoch 15/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4363 - val_loss: 0.2853\n","Epoch 16/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4354 - val_loss: 0.2776\n","Epoch 17/60\n","1831/1831 [==============================] - 3s 2ms/step - loss: 0.4335 - val_loss: 0.2794\n","Epoch 18/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4330 - val_loss: 0.2817\n","Epoch 19/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4324 - val_loss: 0.2848\n","Epoch 20/60\n","1831/1831 [==============================] - 4s 2ms/step - loss: 0.4310 - val_loss: 0.2832\n"]}]},{"cell_type":"code","source":["preds_df = pd.DataFrame(preds_df)"],"metadata":{"id":"Ty4cMurYDfcP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["f1_weighted_res = columnwise_score(f1_score, preds_df, y_test, average='macro')"],"metadata":{"id":"o6OUA8oFGR5j"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["f1_weighted_res.to_csv(os.path.join(ROOT_PATH, 'mlp_см.csv'))"],"metadata":{"id":"UzYVmo-6GTV5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["f1_weighted_res"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9AhvAruFGV-X","executionInfo":{"status":"ok","timestamp":1647792724508,"user_tz":-180,"elapsed":396,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"9aae13fd-004c-47bb-edae-760b26c846ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["category_lead_1    0.587716\n","category_lead_2    0.447446\n","category_lead_3    0.360450\n","category_lead_4    0.348722\n","category_lead_5    0.337936\n","category_lead_6    0.329310\n","category_lead_7    0.326803\n","category_lead_8    0.325338\n","dtype: float64"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["y_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"eK9pxoFQGsGh","executionInfo":{"status":"ok","timestamp":1647792805500,"user_tz":-180,"elapsed":313,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"609297e2-b29a-4e70-f413-fc965792abae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      category_lead_1  category_lead_2  category_lead_3  category_lead_4  \\\n","0                 0.0              0.0              0.0              0.0   \n","1                 0.0              0.0              0.0              0.0   \n","2                 0.0              0.0              0.0              0.0   \n","3                 0.0              0.0              0.0              0.0   \n","4                 0.0              0.0              0.0              0.0   \n","...               ...              ...              ...              ...   \n","5659              0.0              0.0              1.0              1.0   \n","5660              0.0              1.0              1.0              1.0   \n","5661              1.0              1.0              1.0              0.0   \n","5662              1.0              1.0              0.0              0.0   \n","5663              1.0              0.0              0.0              0.0   \n","\n","      category_lead_5  category_lead_6  category_lead_7  category_lead_8  \n","0                 0.0              0.0              0.0              0.0  \n","1                 0.0              0.0              0.0              0.0  \n","2                 0.0              0.0              0.0              0.0  \n","3                 0.0              0.0              0.0              0.0  \n","4                 0.0              0.0              0.0              0.0  \n","...               ...              ...              ...              ...  \n","5659              1.0              0.0              0.0              0.0  \n","5660              0.0              0.0              0.0              0.0  \n","5661              0.0              0.0              0.0              0.0  \n","5662              0.0              0.0              0.0              0.0  \n","5663              0.0              0.0              0.0              0.0  \n","\n","[5664 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-d6a65e7f-c3dd-4551-ac19-f802b6a49e19\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>category_lead_1</th>\n","      <th>category_lead_2</th>\n","      <th>category_lead_3</th>\n","      <th>category_lead_4</th>\n","      <th>category_lead_5</th>\n","      <th>category_lead_6</th>\n","      <th>category_lead_7</th>\n","      <th>category_lead_8</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5659</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5660</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5661</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5662</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5663</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5664 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6a65e7f-c3dd-4551-ac19-f802b6a49e19')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d6a65e7f-c3dd-4551-ac19-f802b6a49e19 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d6a65e7f-c3dd-4551-ac19-f802b6a49e19');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","\n","def columnwise_confusion_matrix(preds_df: pd.DataFrame, y_true_df: pd.DataFrame, \n","                                categories: list) -> list:\n","\n","    all_matrices = {}\n","    for col in preds_df.columns:\n","\n","        matrix = pd.DataFrame(confusion_matrix(y_true_df[col], preds_df[col]),\n","                              index=categories, columns=categories)\n","        all_matrices[col] = matrix\n","\n","    return all_matrices"],"metadata":{"id":"vQsLEXi9GYON"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["confusion_matrices = columnwise_confusion_matrix(preds_df, y_test, [0, 1, 2])"],"metadata":{"id":"ZBoGsyXKGoDr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["matr_path = os.path.join(ROOT_PATH, 'metrics')\n","\n","import os\n","if not os.path.exists(matr_path): os.mkdir(matr_path)\n","\n","for key, matrix in confusion_matrices.items():\n","\n","    matrix.to_excel(\n","        os.path.join(matr_path, f'mlp_cv_confusion_matrix_{key}.xlsx'))"],"metadata":{"id":"oBs91iC3GpXG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","\n","def plot_all_confusion_matrices(matrices: list, \n","                                h: int=2, w: int= 2, **kwargs) -> None:\n","\n","    n = len(matrices)\n","\n","    f, ax = plt.subplots(n, 1, sharex=True)\n","\n","    for i, (key, matrix) in enumerate(matrices.items()):\n","        sns.heatmap(matrix.astype('int'), ax=ax[i], **kwargs)\n","        ax[i].set_title(key)\n","\n","    f.set_figheight(n * h)\n","    f.set_figwidth(w)\n","\n","    plt.tight_layout()\n","\n"],"metadata":{"id":"rfAgfZ4WGytN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_all_confusion_matrices(confusion_matrices, h=3, w=6, annot=True, fmt='.5g', cmap='hot')"],"metadata":{"id":"BgaMWYFxG0AQ","executionInfo":{"status":"ok","timestamp":1647792847547,"user_tz":-180,"elapsed":5190,"user":{"displayName":"Исмаил Гаджиев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12440853034109944227"}},"outputId":"20161868-bd21-4c06-ad5f-192a2cce106a","colab":{"base_uri":"https://localhost:8080/","height":1000}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x1728 with 16 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"Ieoktc7tdxiQ"},"execution_count":null,"outputs":[]}]}